{"ast":null,"code":"/* 1 该文件是用于创建一个为Count组件服务的reducer，reducer的本质就是一个函数\n   2 reducer函数回接收到两个参数，分别为previousState（之前的状态），action（动作对象）\n*/\nimport './constant';\nconst initState = 0;\nexport default function countReducer() {\n  let preState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  //从action对象中获取 type,data\n  const {\n    type,\n    data\n  } = action; //根据type决定如何加工数据\n\n  switch (type) {\n    case 'increment':\n      //加法\n      return preState + data;\n\n    case 'decrement':\n      //减法\n      return preState - data;\n\n    default:\n      return preState;\n  }\n}","map":{"version":3,"names":["initState","countReducer","preState","action","type","data"],"sources":["/Users/user/code/redux_test/src/redux/count_reducer.js"],"sourcesContent":["/* 1 该文件是用于创建一个为Count组件服务的reducer，reducer的本质就是一个函数\n   2 reducer函数回接收到两个参数，分别为previousState（之前的状态），action（动作对象）\n*/\n\nimport {}from './constant'\n\nconst initState = 0;\nexport default function countReducer(preState = initState, action) {\n\t//从action对象中获取 type,data\n\tconst { type, data } = action;\n\t//根据type决定如何加工数据\n\tswitch (type) {\n\t\tcase 'increment': //加法\n\t\t\treturn preState + data;\n\t\tcase 'decrement': //减法\n\t\t\treturn preState - data;\n\n\t\tdefault:\n\t\t\treturn preState;\n\t}\n}\n"],"mappings":"AAAA;AACA;AACA;AAEA,OAAc,YAAd;AAEA,MAAMA,SAAS,GAAG,CAAlB;AACA,eAAe,SAASC,YAAT,GAAoD;EAAA,IAA9BC,QAA8B,uEAAnBF,SAAmB;EAAA,IAARG,MAAQ;EAClE;EACA,MAAM;IAAEC,IAAF;IAAQC;EAAR,IAAiBF,MAAvB,CAFkE,CAGlE;;EACA,QAAQC,IAAR;IACC,KAAK,WAAL;MAAkB;MACjB,OAAOF,QAAQ,GAAGG,IAAlB;;IACD,KAAK,WAAL;MAAkB;MACjB,OAAOH,QAAQ,GAAGG,IAAlB;;IAED;MACC,OAAOH,QAAP;EAPF;AASA"},"metadata":{},"sourceType":"module"}