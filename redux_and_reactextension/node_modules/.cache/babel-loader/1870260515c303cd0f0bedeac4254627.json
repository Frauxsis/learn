{"ast":null,"code":"/* 1 该文件是用于创建一个为Count组件服务的reducer，reducer的本质就是一个函数\n   2 reducer函数回接收到两个参数，分别为previousState（之前的状态），action（动作对象）\n*/import{INCREMENT,DECREMENT}from'../constant';var initState=0;export default function countReducer(){var preState=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initState;var action=arguments.length>1?arguments[1]:undefined;//从action对象中获取 type,data\nvar type=action.type,data=action.data;//根据type决定如何加工数据\nswitch(type){case INCREMENT://加法\nreturn preState+data;case DECREMENT://减法\nreturn preState-data;default:return preState;}}","map":{"version":3,"names":["INCREMENT","DECREMENT","initState","countReducer","preState","action","type","data"],"sources":["/Users/user/code/redux_test/src/redux/reducers/count.js"],"sourcesContent":["/* 1 该文件是用于创建一个为Count组件服务的reducer，reducer的本质就是一个函数\n   2 reducer函数回接收到两个参数，分别为previousState（之前的状态），action（动作对象）\n*/\n\nimport { INCREMENT, DECREMENT } from '../constant';\n\nconst initState = 0;\nexport default function countReducer(preState = initState, action) {\n\t//从action对象中获取 type,data\n\tconst { type, data } = action;\n\t//根据type决定如何加工数据\n\tswitch (type) {\n\t\tcase INCREMENT: //加法\n\t\t\treturn preState + data;\n\t\tcase DECREMENT: //减法\n\t\t\treturn preState - data;\n\n\t\tdefault:\n\t\t\treturn preState;\n\t}\n}\n"],"mappings":"AAAA;AACA;AACA,EAEA,OAASA,SAAT,CAAoBC,SAApB,KAAqC,aAArC,CAEA,GAAMC,UAAS,CAAG,CAAlB,CACA,cAAe,SAASC,aAAT,EAAoD,IAA9BC,SAA8B,2DAAnBF,SAAmB,IAARG,OAAQ,2CAClE;AACA,GAAQC,KAAR,CAAuBD,MAAvB,CAAQC,IAAR,CAAcC,IAAd,CAAuBF,MAAvB,CAAcE,IAAd,CACA;AACA,OAAQD,IAAR,EACC,IAAKN,UAAL,CAAgB;AACf,MAAOI,SAAQ,CAAGG,IAAlB,CACD,IAAKN,UAAL,CAAgB;AACf,MAAOG,SAAQ,CAAGG,IAAlB,CAED,QACC,MAAOH,SAAP,CAPF,CASA"},"metadata":{},"sourceType":"module"}