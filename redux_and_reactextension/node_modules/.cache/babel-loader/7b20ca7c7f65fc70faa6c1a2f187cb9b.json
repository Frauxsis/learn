{"ast":null,"code":"// 引入Count的UI组件\nimport CountUI from '../../components/Count';\nimport second from 'first'; // 引入connect用于连接UI组件和redux\n\nimport { connect } from 'react-redux'; //a函数的返回的对象中的key就作为传递给UI组件props的key，value就作为传递给UI组件props的value ===> a函数传递状态\n\nfunction a(state) {\n  return {\n    count: state\n  };\n} //b函数的返回的对象中的key就作为传递给UI组件props的key，value就作为传递给UI组件props的value ===> b函数传递操作状态的方法\n\n\nfunction b(dispatch) {\n  return {\n    jia: number => {\n      //通知redux执行加法\n      dispatch({\n        type: 'increment',\n        data: number\n      });\n    }\n  };\n} //使用connect()() 创建并暴露一个Count的容器组件\n\n\nexport default connect(a, b)(CountUI);","map":{"version":3,"names":["CountUI","second","connect","a","state","count","b","dispatch","jia","number","type","data"],"sources":["/Users/user/code/redux_test/src/containers/Count/index.jsx"],"sourcesContent":["// 引入Count的UI组件\nimport CountUI from '../../components/Count';\nimport second from 'first'\n\n// 引入connect用于连接UI组件和redux\nimport { connect } from 'react-redux';\n\n//a函数的返回的对象中的key就作为传递给UI组件props的key，value就作为传递给UI组件props的value ===> a函数传递状态\nfunction a(state) {\n\treturn { count:state };\n}\n//b函数的返回的对象中的key就作为传递给UI组件props的key，value就作为传递给UI组件props的value ===> b函数传递操作状态的方法\nfunction b(dispatch) {\n\treturn {\n\t\tjia: (number) => {\n\t\t//通知redux执行加法\n         dispatch({type:'increment',data:number})\n\t\t},\n\t};\n}\n\n//使用connect()() 创建并暴露一个Count的容器组件\nexport default connect(a, b)(CountUI);\n"],"mappings":"AAAA;AACA,OAAOA,OAAP,MAAoB,wBAApB;AACA,OAAOC,MAAP,MAAmB,OAAnB,C,CAEA;;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CAEA;;AACA,SAASC,CAAT,CAAWC,KAAX,EAAkB;EACjB,OAAO;IAAEC,KAAK,EAACD;EAAR,CAAP;AACA,C,CACD;;;AACA,SAASE,CAAT,CAAWC,QAAX,EAAqB;EACpB,OAAO;IACNC,GAAG,EAAGC,MAAD,IAAY;MACjB;MACOF,QAAQ,CAAC;QAACG,IAAI,EAAC,WAAN;QAAkBC,IAAI,EAACF;MAAvB,CAAD,CAAR;IACN;EAJK,CAAP;AAMA,C,CAED;;;AACA,eAAeP,OAAO,CAACC,CAAD,EAAIG,CAAJ,CAAP,CAAcN,OAAd,CAAf"},"metadata":{},"sourceType":"module"}